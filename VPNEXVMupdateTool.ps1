#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 8d4ee6da-b9ef-447c-abb0-76322ad0ec00
# Source File: VPNEXVMupdateTool.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)

#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.145
     Generated on:       29/12/2020 6:52 PM
     Generated by:       Eric Mercado
    --------------------------------------------------------------------------------
    .DESCRIPTION
        
#>
<#
	    .SYNOPSIS
	        The tool is main function is to convert VM template to a regular VM and has the capability to run software updates,
			patch and service packs. 
			The application uses the following applications to run the automation
			vsphere 7
			AnsibleServer
			scp
			ssh
			putty - to push the .sh shell script to ansible
	    
	    .PARAMETER Commandline
	        there are no option for parameter as this is intended to run on GUI mode

			
	    .NOTES
	        To get the console output in the Packager (Forms Engine) use: 
			$ConsoleOutput (Type: System.Collections.ArrayList)
#>


#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-VPNEXVMupdateTool_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formTemplateUpdateTool = New-Object 'System.Windows.Forms.Form'
	$mainconstrip = New-Object 'System.Windows.Forms.StatusStrip'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonBack = New-Object 'System.Windows.Forms.Button'
	$buttonFinish = New-Object 'System.Windows.Forms.Button'
	$tabcontrolWizard = New-Object 'System.Windows.Forms.TabControl'
	$tabpageStep1 = New-Object 'System.Windows.Forms.TabPage'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$btnClear = New-Object 'System.Windows.Forms.Button'
	$labelVcenter = New-Object 'System.Windows.Forms.Label'
	$vcenter = New-Object 'System.Windows.Forms.TextBox'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$uname = New-Object 'System.Windows.Forms.TextBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$passw = New-Object 'System.Windows.Forms.TextBox'
	$buttonConnect = New-Object 'System.Windows.Forms.Button'
	$tabpageStep2 = New-Object 'System.Windows.Forms.TabPage'
	$totaltemplate = New-Object 'System.Windows.Forms.Label'
	$selecttemplate = New-Object 'System.Windows.Forms.Label'
	$listtemplate = New-Object 'System.Windows.Forms.ListBox'
	$tabpageStep3 = New-Object 'System.Windows.Forms.TabPage'
	$uploadstatus = New-Object 'System.Windows.Forms.Label'
	$labelTargetTemplate = New-Object 'System.Windows.Forms.Label'
	$buttonUploadNewSoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$radiobuttonServicePack = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonOSPatch = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonSoftwareUpdate = New-Object 'System.Windows.Forms.RadioButton'
	$tabpageStep4 = New-Object 'System.Windows.Forms.TabPage'
	$radiobuttonManualStepByStep = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonAutomated = New-Object 'System.Windows.Forms.RadioButton'
	$buttonExcuteAll = New-Object 'System.Windows.Forms.Button'
	$btnconvertvm = New-Object 'System.Windows.Forms.Button'
	$statuslabel = New-Object 'System.Windows.Forms.Label'
	$buttonStep3ConvertToTempla = New-Object 'System.Windows.Forms.Button'
	$labelBackgroundProcess1Te = New-Object 'System.Windows.Forms.Label'
	$buttonStep2StartUpdate = New-Object 'System.Windows.Forms.Button'
	$buttonNext = New-Object 'System.Windows.Forms.Button'
	$sbLabel = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects
	
	#-------------------------------------------------------
	# NOTE: When new TabPage added place the validation code
	# 		in the Test-WizardPage function.
	#-------------------------------------------------------
	
	$global:selectedupdate = 0
	
	
	function Test-WizardPage
	{
	<#
		Add TabPages and place the validation code in this function
	#>
		[OutputType([boolean])]
		param([System.Windows.Forms.TabPage]$tabPage)
		
		if($tabPage -eq $tabpageStep1)
		{
			#TODO: Enter Validation Code here for Step 1
			if ($buttonConnect.Text -eq "Connect")
			{
				$buttonNext.Enabled = $false
				return $false
			}
			else
			{
				$buttonNext.Enabled = $true
				return $true
			}		
		}
		elseif ($tabPage -eq $tabpageStep2)
		{
			#TODO: Enter Validation Code here for Step 2
			if ($listtemplate.SelectedIndex -ne -1)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep3)
		{
			#TODO: Enter Validation Code here for Step 3
			if ($radiobuttonSoftwareUpdate.Checked -or
				$radiobuttonOSPatch.Checked -or
				$radiobuttonServicePack.Checked)
			{
				return $true
			}
		}
		elseif ($tabPage -eq $tabpageStep4)
		{
			#TODO: Enter Validation Code here for Step 3
			if ($statuslabel.Text -eq "Status: New Template successfully created...")
			{
				$buttonFinish.Enabled = $true
				$buttonNext.Enabled = $false
				return $true
			}
		}
		#Add more pages here
		
		return $false
	}
	
	
	$buttonFinish_Click={
		#-------------------------------------------------------
		# TODO: Place finalization script here
		#-------------------------------------------------------
		
	}
	
	#region Events and Functions
	$formTemplateUpdateTool_Load={
		Update-NavButtons
	}
	
	function Update-NavButtons
	{
		<# 
			.DESCRIPTION
			Validates the current tab and Updates the Next, Prev and Finish buttons.
		#>
		$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
		$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
		$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
		
		#Uncomment to Hide Buttons
		#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
	}
	
	$script:DeselectedIndex = -1
	$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# Store the previous tab index
		$script:DeselectedIndex = $_.TabPageIndex
	}
	
	$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# We only validate if we are moving to the Next TabPage. 
		# Users can move back without validating
		if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
		{
			#Validate each page until we reach the one we want
			for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
			{
				$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
				
				if($_.Cancel) 
				{
					# Cancel and Return if validation failed.
					return;
				}
			}
		}
		
		Update-NavButtons
	}
	
	$buttonBack_Click={
		#Go to the previous tab page
		if($tabcontrolWizard.SelectedIndex -gt 0)
		{
			$tabcontrolWizard.SelectedIndex--
		}
	}
	
	$buttonNext_Click={	
		#Go to the next tab page
		if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		{
			$tabcontrolWizard.SelectedIndex++
		}
	}
	
	#endregion
	
	#------------------------------------------------------
	# NOTE: When a Control State changes you should call
	# 		Update-NavButtons to trigger validation
	#------------------------------------------------------
	
	$textboxName_TextChanged={
		Update-NavButtons
	}
	
	$checkboxSelectTemplateToUpda_CheckedChanged={
		Update-NavButtons
	}
	
	$radiobuttonOption_CheckedChanged={
		
		if($radiobuttonSoftwareUpdate.Checked)
		{
			$buttonUploadNewSoftware.Visible = $true
			$global:selectedupdate = 1
			#$statuslabel.Text = $global:selectedupdate
		}
		elseif ($radiobuttonOSPatch.checked)
		{
			$buttonUploadNewSoftware.Visible = $false
			$global:selectedupdate = 2
			#$statuslabel.Text = $global:selectedupdate
		}
		elseif ($radiobuttonServicePack.Checked)
		{
			$buttonUploadNewSoftware.Visible = $false
			$global:selectedupdate = 3
			#$statuslabel.Text = $global:selectedupdate
		}
		
		if($this.Checked)
		{
			Update-NavButtons
		}
	}
	
	$listtemplate_SelectedIndexChanged = {
		#TODO: Place custom script here
		# Get index of selected item  $listtemplate.SelectedIndex
		$selecttemplate.text = "Selected template [" + $listtemplate.SelectedItem + "]"
		$labelTargetTemplate.Text = $listtemplate.SelectedItem
		Update-NavButtons
	}
	
	
	$tabcontrolWizard_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{

		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	
	#---------------------------------------------------------------------------------
	#---------Source Code Starts here ------------------------------------------------
	#---------------------------------------------------------------------------------
	function Main
	{
	#---------------------------------------------------------------------------------
	#---------Main function to start the process and this segment enables verbose logging --------
	#---------------------------------------------------------------------------------
		Param ([String]$Commandline)
		
		#--------------------------------------------------------------------------
		#TODO: Add initialization script here (Load modules and check requirements)
		## Load PowerCLI Powershell Snapin
		#Prevent loading Snapin if already loaded
		#--------------------------------------------------------------------------
		if (([bool](Get-Module -Name VMware.VimAutomation.Core -ErrorAction SilentlyContinue)) -eq $false)
		{
			Write-Verbose "$(Get-Date -format G)	Loading VMware PowerCLI Plugin"
			Import-Module VMware.VimAutomation.Core
			Write-Verbose "$(Get-Date -format G)	Loading VMware PowerCLI Plugin Complete"
		}
		else
		{
			Write-Verbose "$(Get-Date -format G)	VMware PowerCLI Plugin already loaded"
		}
		
		#--------------------------------------------------------------------------
		
		if ((Show-ConnectvCenter_psf) -eq 'OK')
		{
			
		}
		
		$global:ExitCode = 0 #Set the exit code for the Packager
	}
	$VerbosePreference = 'continue'
#--------------------------------------------------------------------------
		#Descrition: Code to login to Vcenter
#--------------------------------------------------------------------------	
	$buttonConnect_Click={
		#TODO: Place custom script here

		$computer = $vcenter.Text
		
		Set-StatusBar 'blue' "Connecting to $computer"
		
		try
		{
			Connect-VMcenter	
		}
		catch
		{
			$constrip.Text = $_.Exception.Message
		}
		Update-NavButtons
		$templist = Get-Template | select -ExpandProperty name
		$listtemplate.Items.Clear()
		$listtemplate.Items.AddRange($templist)
		$totaltemplate.Text = "Total Number of VM Template: " + $listtemplate.Items.Count
	}
	
	Function Set-StatusBar ([Drawing.Color]$Color, $Text)
	{
		$sbLabel.BackColor = $Color
		$sbLabel.Text = $text
		$sbLabel.ForeColor = 'Yellow'
		$mainconstrip.Update()
	}
	
	function Connect-VMcenter
	{
		#	param
		#	(
		#		[parameter(Mandatory = $true)]
		#		$VCname,
		#		[string]$uname,
		#		[string]$upass
		#	)
		
		if ($buttonConnect.Text -eq "Connect")
		{
			
			if (!$vconn.isconnected)
			{
				
				#$global:vconn = Connect-VIServer -Server $VCenter.text -Username $uname.text -Password $passw -Force
				$global:vconn = Connect-VIServer $vcenter.Text -Username $uname.Text -Password $passw.Text -Force
				
				if (!$vconn.isconnected)
				{
					$buttonConnect.Text = "Connect"
					$constrip.Text = "unable to Connect"
					$constrip.Text = $_.Exception.Message
				}
				else
				{
					Set-StatusBar 'blue' "Success Connected to $computer"
					$buttonConnect.Text = "Disconnect"
					$constrip.Text = "Connected"
					Start-Sleep -s 5
					$sbLabel.Text = ""
					$mainconstrip.Update()				
				}
				
			}
			
		}
		elseif ($buttonConnect.Text -eq "Disconnect")
		{
			$dconn = Disconnect-VIServer -Server $global:DefaultVIServers -Force -Confirm:$false
			$buttonConnect.Text = "Connect"
			$constrip.Text = "Disconnected"
			$ReportOutput.Text = ""
			
		}
	}

#--------------------------------------------------------------------------
		#Descrition: Code to login to Vcenter - Ends here
#--------------------------------------------------------------------------		
#--------------------------------------------------------------------------
		#Descrition: Codes used for troubleshooting and debuging outputs
#--------------------------------------------------------------------------		
	$buttonAnsitest_Click={
		#TODO: Place custom script here
		Start-Process putty.exe -ArgumentList "-i C:\Users\Administrator\.ssh\puttypriv.ppk -ssh erictm@10.252.20.55 -m C:\xfer\vpnexpress\sample\softwareupdate.sh"
	}
	
	$buttonAnsiConnect_Click={
		#TODO: Place custom script here
		Start-Process cmd -ArgumentList "ssh erictm@10.252.20.55"
		#ssh erictm@10.252.20.55 	
	}
	
	$buttonVmtest_Click={
		#TODO: Place custom script here
		$templist = Get-Template | select -ExpandProperty name
		$listtemplate.Clear()
		$listtemplate.Items.AddRange($templist)
	}
#--------------------------------------------------------------------------
		#Descrition: Codes used for troubleshooting and debuging outputs - Ends here
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
		#Descrition: code to upload software files to ansible server
#--------------------------------------------------------------------------
	
	$buttonUploadNewSoftware_Click={
		#TODO: Place custom script here
		$openfiledialog1.ShowDialog()
		$fileupload = $openfiledialog1.FileName
		
		try
		{
			Start-Process scp -ArgumentList "$fileupload erictm@10.252.20.55:/etc/ansible/files/" -wait
			$uploadstatus.Text = "Upload Status: Upload success"	
		}
		catch
		{
			Write-Verbose $_.Exception.Message
		}
		
	}
#--------------------------------------------------------------------------
		#Descrition: Codes used for troubleshooting and debuging outputs - Ends Here
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
		#Descrition: Codes used for converting template to Virtual Machine
#--------------------------------------------------------------------------
	
	$btnConvertVM_Click={
		#TODO: Place custom script here
		$showProgress = $true
		$TempName = $listtemplate.SelectedItem
		$copyTempESXHost = "192.168.50.100"
		$copyTempDatastore = "datastore1"
		$statuslabel.Text = "Status: Converting Template to Virtual Machine..."

		New-VM -Name 'Win16VM01' -Template $TempName -VMHost $copyTempESXHost -Datastore $copyTempDatastore	
		Get-VM Win16VM01 | Start-VM -RunAsync:$RunAsync
	}
#--------------------------------------------------------------------------
		#Descrition: Codes used for VM software update 
#--------------------------------------------------------------------------
		
	$buttonStep2StartUpdate_Click = {
		#TODO: Place custom script here
		
		do
		{
			$vmtstatus = (get-vm Win16VM01 | Get-View).guest.toolsStatus
			Start-Sleep -s 3
			Write-Verbose $vmtstatus
			$statuslabel.Text = "Status: Checking OS is up and running..."
		}
		while ($vmtstatus -eq "toolsNotRunning")
		{
			Write-Verbose "vmtools is now up"
			$statuslabel.Text = "Status: OS status online and running..."
			Start-Sleep -s 5
		}
		
		if ($global:selectedupdate -eq 1)
		{
			$statuslabel.Text = "Status: Installing Software Updates..."
			Start-Process putty.exe -ArgumentList "-i C:\Users\Administrator\.ssh\puttypriv.ppk -ssh erictm@10.252.20.55 -m C:\xfer\vpnexpress\sample\softwareupdate.sh" -Wait
			Start-Sleep -s 10
			$statuslabel.Text = "Status: Software Update completed..."
		}
		elseif ($global:selectedupdate -eq 2)
		{
			$statuslabel.Text = "Status: Installing OS Patch..."
			Start-Process putty.exe -ArgumentList "-i C:\Users\Administrator\.ssh\puttypriv.ppk -ssh erictm@10.252.20.55 -m C:\xfer\vpnexpress\sample\ospatch.sh" -Wait
			Start-Sleep -s 10
			$statuslabel.Text = "Status: OS Patch completed."
		}
		elseif ($global:selectedupdate -eq 3)
		{
			$statuslabel.Text = "Status: Installing Service Pack..."
			Start-Process putty.exe -ArgumentList "-i C:\Users\Administrator\.ssh\puttypriv.ppk -ssh erictm@10.252.20.55 -m C:\xfer\vpnexpress\sample\sppack.sh" -Wait
			Start-Sleep -s 10
			$statuslabel.Text = "Status: Service Pack completed."
		}
		
	}
#--------------------------------------------------------------------------
		#Descrition: Codes used for converting VM Back to template
#--------------------------------------------------------------------------
	
	$buttonStep3ConvertToTempla_Click={
		#TODO: Place custom script here
		Start-Sleep -s 2
		$statuslabel.Text = "Status: Converting Virtual Machine to Updated Template..."
		Get-VM Win16VM01 | Stop-VMGuest -Confirm:$false
		Start-Sleep -s 30
		Get-VM Win16VM01 | Set-VM -ToTemplate -Confirm:$false
		
		$statuslabel.Text = "Status: New Template successfully created..."
		Update-NavButtons
	}
	
#--------------------------------------------------------------------------
		#Descrition: Initialize buttons
#--------------------------------------------------------------------------
		
	
	$btnClear_Click={
		#TODO: Place custom script here
		$vcenter.Text = ""
		$uname.Text = ""
		$passw.Text = ""
	}
	
	$radiobuttonAutomated_CheckedChanged={
		#TODO: Place custom script here
		$buttonExcuteAll.Enabled = $true
		$btnconvertvm.Enabled = $false
		$buttonStep2StartUpdate.Enabled = $false
		$buttonStep3ConvertToTempla.Enabled = $false
		
	}
	
	$radiobuttonManualStepByStep_CheckedChanged={
		#TODO: Place custom script here
		$buttonExcuteAll.Enabled = $false
		$btnconvertvm.Enabled = $true
		$buttonStep2StartUpdate.Enabled = $true
		$buttonStep3ConvertToTempla.Enabled = $true
	}
	
	$buttonExcuteAll_Click={
		#TODO: Place custom script here
		$btnConvertVM_Click.invoke()
		$buttonStep2StartUpdate_Click.invoke()
		$buttonStep3ConvertToTempla_Click.invoke()
		Update-NavButtons
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formTemplateUpdateTool.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonBack.remove_Click($buttonBack_Click)
			$buttonFinish.remove_Click($buttonFinish_Click)
			$btnClear.remove_Click($btnClear_Click)
			$buttonConnect.remove_Click($buttonConnect_Click)
			$listtemplate.remove_SelectedIndexChanged($listtemplate_SelectedIndexChanged)
			$buttonUploadNewSoftware.remove_Click($buttonUploadNewSoftware_Click)
			$radiobuttonServicePack.remove_CheckedChanged($radiobuttonOption_CheckedChanged)
			$radiobuttonOSPatch.remove_CheckedChanged($radiobuttonOption_CheckedChanged)
			$radiobuttonSoftwareUpdate.remove_CheckedChanged($radiobuttonOption_CheckedChanged)
			$radiobuttonManualStepByStep.remove_CheckedChanged($radiobuttonManualStepByStep_CheckedChanged)
			$radiobuttonAutomated.remove_CheckedChanged($radiobuttonAutomated_CheckedChanged)
			$buttonExcuteAll.remove_Click($buttonExcuteAll_Click)
			$btnconvertvm.remove_Click($btnConvertVM_Click)
			$buttonStep3ConvertToTempla.remove_Click($buttonStep3ConvertToTempla_Click)
			$buttonStep2StartUpdate.remove_Click($buttonStep2StartUpdate_Click)
			$tabcontrolWizard.remove_SelectedIndexChanged($tabcontrolWizard_SelectedIndexChanged)
			$tabcontrolWizard.remove_Selecting($tabcontrolWizard_Selecting)
			$tabcontrolWizard.remove_Deselecting($tabcontrolWizard_Deselecting)
			$buttonNext.remove_Click($buttonNext_Click)
			$formTemplateUpdateTool.remove_Load($formTemplateUpdateTool_Load)
			$formTemplateUpdateTool.remove_Load($Form_StateCorrection_Load)
			$formTemplateUpdateTool.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formTemplateUpdateTool.SuspendLayout()
	$mainconstrip.SuspendLayout()
	$tabcontrolWizard.SuspendLayout()
	$tabpageStep1.SuspendLayout()
	$tabpageStep2.SuspendLayout()
	$tabpageStep3.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpageStep4.SuspendLayout()
	#
	# formTemplateUpdateTool
	#
	$formTemplateUpdateTool.Controls.Add($mainconstrip)
	$formTemplateUpdateTool.Controls.Add($buttonCancel)
	$formTemplateUpdateTool.Controls.Add($buttonBack)
	$formTemplateUpdateTool.Controls.Add($buttonFinish)
	$formTemplateUpdateTool.Controls.Add($tabcontrolWizard)
	$formTemplateUpdateTool.Controls.Add($buttonNext)
	$formTemplateUpdateTool.AcceptButton = $buttonFinish
	$formTemplateUpdateTool.AutoScaleDimensions = '6, 13'
	$formTemplateUpdateTool.AutoScaleMode = 'Font'
	$formTemplateUpdateTool.CancelButton = $buttonCancel
	$formTemplateUpdateTool.ClientSize = '541, 363'
	$formTemplateUpdateTool.FormBorderStyle = 'FixedSingle'
	#region Binary Data
	$formTemplateUpdateTool.Icon = [System.Convert]::FromBase64String()
	#endregion
	$formTemplateUpdateTool.MaximizeBox = $False
	$formTemplateUpdateTool.MinimizeBox = $False
	$formTemplateUpdateTool.Name = 'formTemplateUpdateTool'
	$formTemplateUpdateTool.StartPosition = 'CenterScreen'
	$formTemplateUpdateTool.Text = 'Template Update Tool'
	$formTemplateUpdateTool.add_Load($formTemplateUpdateTool_Load)
	#
	# mainconstrip
	#
	[void]$mainconstrip.Items.Add($sbLabel)
	$mainconstrip.Location = '0, 341'
	$mainconstrip.Name = 'mainconstrip'
	$mainconstrip.Size = '541, 22'
	$mainconstrip.TabIndex = 5
	$mainconstrip.Text = 'statusstrip1'
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '373, 315'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 4
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	#
	# buttonBack
	#
	$buttonBack.Anchor = 'Bottom, Left'
	$buttonBack.Location = '13, 311'
	$buttonBack.Name = 'buttonBack'
	$buttonBack.Size = '75, 23'
	$buttonBack.TabIndex = 1
	$buttonBack.Text = '< &Back'
	$buttonBack.UseCompatibleTextRendering = $True
	$buttonBack.UseVisualStyleBackColor = $True
	$buttonBack.add_Click($buttonBack_Click)
	#
	# buttonFinish
	#
	$buttonFinish.Anchor = 'Bottom, Right'
	$buttonFinish.DialogResult = 'OK'
	$buttonFinish.Location = '454, 315'
	$buttonFinish.Name = 'buttonFinish'
	$buttonFinish.Size = '75, 23'
	$buttonFinish.TabIndex = 3
	$buttonFinish.Text = '&Finish'
	$buttonFinish.UseCompatibleTextRendering = $True
	$buttonFinish.UseVisualStyleBackColor = $True
	$buttonFinish.add_Click($buttonFinish_Click)
	#
	# tabcontrolWizard
	#
	$tabcontrolWizard.Controls.Add($tabpageStep1)
	$tabcontrolWizard.Controls.Add($tabpageStep2)
	$tabcontrolWizard.Controls.Add($tabpageStep3)
	$tabcontrolWizard.Controls.Add($tabpageStep4)
	$tabcontrolWizard.Anchor = 'Top, Bottom, Left, Right'
	$tabcontrolWizard.Location = '13, 12'
	$tabcontrolWizard.Name = 'tabcontrolWizard'
	$tabcontrolWizard.SelectedIndex = 0
	$tabcontrolWizard.Size = '516, 293'
	$tabcontrolWizard.TabIndex = 0
	$tabcontrolWizard.add_SelectedIndexChanged($tabcontrolWizard_SelectedIndexChanged)
	$tabcontrolWizard.add_Selecting($tabcontrolWizard_Selecting)
	$tabcontrolWizard.add_Deselecting($tabcontrolWizard_Deselecting)
	#
	# tabpageStep1
	#
	$tabpageStep1.Controls.Add($picturebox1)
	$tabpageStep1.Controls.Add($btnClear)
	$tabpageStep1.Controls.Add($labelVcenter)
	$tabpageStep1.Controls.Add($vcenter)
	$tabpageStep1.Controls.Add($labelUsername)
	$tabpageStep1.Controls.Add($uname)
	$tabpageStep1.Controls.Add($labelPassword)
	$tabpageStep1.Controls.Add($passw)
	$tabpageStep1.Controls.Add($buttonConnect)
	$tabpageStep1.Location = '4, 22'
	$tabpageStep1.Name = 'tabpageStep1'
	$tabpageStep1.Padding = '3, 3, 3, 3'
	$tabpageStep1.Size = '508, 267'
	$tabpageStep1.TabIndex = 0
	$tabpageStep1.Text = 'Step 1'
	$tabpageStep1.UseVisualStyleBackColor = $True
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String()
	#endregion
	$picturebox1.Location = '307, 32'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '170, 176'
	$picturebox1.SizeMode = 'StretchImage'
	$picturebox1.TabIndex = 85
	$picturebox1.TabStop = $False
	#
	# btnClear
	#
	$btnClear.Location = '179, 122'
	$btnClear.Name = 'btnClear'
	$btnClear.Size = '68, 23'
	$btnClear.TabIndex = 84
	$btnClear.Text = 'Clear'
	$btnClear.UseCompatibleTextRendering = $True
	$btnClear.UseVisualStyleBackColor = $True
	$btnClear.add_Click($btnClear_Click)
	#
	# labelVcenter
	#
	$labelVcenter.AutoSize = $True
	$labelVcenter.Location = '47, 35'
	$labelVcenter.Margin = '1, 0, 1, 0'
	$labelVcenter.Name = 'labelVcenter'
	$labelVcenter.Size = '43, 17'
	$labelVcenter.TabIndex = 75
	$labelVcenter.Text = 'Vcenter'
	$labelVcenter.UseCompatibleTextRendering = $True
	#
	# vcenter
	#
	$vcenter.Location = '105, 32'
	$vcenter.Margin = '1, 1, 1, 1'
	$vcenter.Name = 'vcenter'
	$vcenter.Size = '152, 20'
	$vcenter.TabIndex = 74
	$vcenter.Text = '192.168.50.200'
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Location = '33, 56'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '56, 17'
	$labelUsername.TabIndex = 76
	$labelUsername.Text = 'Username'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# uname
	#
	$uname.Location = '105, 55'
	$uname.Name = 'uname'
	$uname.Size = '152, 20'
	$uname.TabIndex = 77
	$uname.Text = 'administrator@vsphere.local'
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.Location = '36, 81'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '54, 17'
	$labelPassword.TabIndex = 78
	$labelPassword.Text = 'Password'
	$labelPassword.UseCompatibleTextRendering = $True
	#
	# passw
	#
	$passw.Location = '105, 81'
	$passw.Name = 'passw'
	$passw.PasswordChar = '*'
	$passw.Size = '152, 20'
	$passw.TabIndex = 79
	$passw.Text = 
	#
	# buttonConnect
	#
	$buttonConnect.Location = '105, 122'
	$buttonConnect.Name = 'buttonConnect'
	$buttonConnect.Size = '68, 23'
	$buttonConnect.TabIndex = 8
	$buttonConnect.Text = 'Connect'
	$buttonConnect.UseCompatibleTextRendering = $True
	$buttonConnect.UseVisualStyleBackColor = $True
	$buttonConnect.add_Click($buttonConnect_Click)
	#
	# tabpageStep2
	#
	$tabpageStep2.Controls.Add($totaltemplate)
	$tabpageStep2.Controls.Add($selecttemplate)
	$tabpageStep2.Controls.Add($listtemplate)
	$tabpageStep2.Location = '4, 22'
	$tabpageStep2.Name = 'tabpageStep2'
	$tabpageStep2.Padding = '3, 3, 3, 3'
	$tabpageStep2.Size = '508, 267'
	$tabpageStep2.TabIndex = 1
	$tabpageStep2.Text = 'Step 2'
	$tabpageStep2.UseVisualStyleBackColor = $True
	#
	# totaltemplate
	#
	$totaltemplate.AutoSize = $True
	$totaltemplate.Location = '267, 144'
	$totaltemplate.Name = 'totaltemplate'
	$totaltemplate.Size = '164, 17'
	$totaltemplate.TabIndex = 3
	$totaltemplate.Text = 'Total Number of VM Templates:'
	$totaltemplate.UseCompatibleTextRendering = $True
	#
	# selecttemplate
	#
	$selecttemplate.AutoSize = $True
	$selecttemplate.Location = '34, 144'
	$selecttemplate.Name = 'selecttemplate'
	$selecttemplate.Size = '132, 17'
	$selecttemplate.TabIndex = 2
	$selecttemplate.Text = 'Select template to update'
	$selecttemplate.UseCompatibleTextRendering = $True
	#
	# listtemplate
	#
	$listtemplate.FormattingEnabled = $True
	[void]$listtemplate.Items.Add('Template01')
	[void]$listtemplate.Items.Add('Template02')
	[void]$listtemplate.Items.Add('Template03')
	[void]$listtemplate.Items.Add('Template04')
	[void]$listtemplate.Items.Add('Template05')
	[void]$listtemplate.Items.Add('Template06')
	[void]$listtemplate.Items.Add('Template07')
	[void]$listtemplate.Items.Add('Template08')
	[void]$listtemplate.Items.Add('Template09')
	[void]$listtemplate.Items.Add('Template10')
	$listtemplate.Location = '34, 33'
	$listtemplate.Name = 'listtemplate'
	$listtemplate.Size = '210, 108'
	$listtemplate.TabIndex = 1
	$listtemplate.add_SelectedIndexChanged($listtemplate_SelectedIndexChanged)
	#
	# tabpageStep3
	#
	$tabpageStep3.Controls.Add($uploadstatus)
	$tabpageStep3.Controls.Add($labelTargetTemplate)
	$tabpageStep3.Controls.Add($buttonUploadNewSoftware)
	$tabpageStep3.Controls.Add($groupbox1)
	$tabpageStep3.Location = '4, 22'
	$tabpageStep3.Name = 'tabpageStep3'
	$tabpageStep3.Size = '508, 267'
	$tabpageStep3.TabIndex = 2
	$tabpageStep3.Text = 'Step 3'
	$tabpageStep3.UseVisualStyleBackColor = $True
	#
	# uploadstatus
	#
	$uploadstatus.AutoSize = $True
	$uploadstatus.Location = '300, 80'
	$uploadstatus.Name = 'uploadstatus'
	$uploadstatus.Size = '77, 17'
	$uploadstatus.TabIndex = 3
	$uploadstatus.Text = 'Upload status:'
	$uploadstatus.UseCompatibleTextRendering = $True
	#
	# labelTargetTemplate
	#
	$labelTargetTemplate.AutoSize = $True
	$labelTargetTemplate.Location = '300, 34'
	$labelTargetTemplate.Name = 'labelTargetTemplate'
	$labelTargetTemplate.Size = '83, 17'
	$labelTargetTemplate.TabIndex = 2
	$labelTargetTemplate.Text = 'Target template'
	$labelTargetTemplate.UseCompatibleTextRendering = $True
	#
	# buttonUploadNewSoftware
	#
	$buttonUploadNewSoftware.Location = '300, 54'
	$buttonUploadNewSoftware.Name = 'buttonUploadNewSoftware'
	$buttonUploadNewSoftware.Size = '151, 23'
	$buttonUploadNewSoftware.TabIndex = 1
	$buttonUploadNewSoftware.Text = 'Upload New Software'
	$buttonUploadNewSoftware.UseCompatibleTextRendering = $True
	$buttonUploadNewSoftware.UseVisualStyleBackColor = $True
	$buttonUploadNewSoftware.Visible = $False
	$buttonUploadNewSoftware.add_Click($buttonUploadNewSoftware_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($radiobuttonServicePack)
	$groupbox1.Controls.Add($radiobuttonOSPatch)
	$groupbox1.Controls.Add($radiobuttonSoftwareUpdate)
	$groupbox1.Location = '13, 15'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '272, 174'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Select an Option'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# radiobuttonServicePack
	#
	$radiobuttonServicePack.Location = '20, 79'
	$radiobuttonServicePack.Name = 'radiobuttonServicePack'
	$radiobuttonServicePack.Size = '104, 24'
	$radiobuttonServicePack.TabIndex = 2
	$radiobuttonServicePack.TabStop = $True
	$radiobuttonServicePack.Text = 'Service Pack'
	$radiobuttonServicePack.UseCompatibleTextRendering = $True
	$radiobuttonServicePack.UseVisualStyleBackColor = $True
	$radiobuttonServicePack.add_CheckedChanged($radiobuttonOption_CheckedChanged)
	#
	# radiobuttonOSPatch
	#
	$radiobuttonOSPatch.Location = '20, 49'
	$radiobuttonOSPatch.Name = 'radiobuttonOSPatch'
	$radiobuttonOSPatch.Size = '104, 24'
	$radiobuttonOSPatch.TabIndex = 1
	$radiobuttonOSPatch.TabStop = $True
	$radiobuttonOSPatch.Text = 'OS Patch'
	$radiobuttonOSPatch.UseCompatibleTextRendering = $True
	$radiobuttonOSPatch.UseVisualStyleBackColor = $True
	$radiobuttonOSPatch.add_CheckedChanged($radiobuttonOption_CheckedChanged)
	#
	# radiobuttonSoftwareUpdate
	#
	$radiobuttonSoftwareUpdate.Location = '20, 19'
	$radiobuttonSoftwareUpdate.Name = 'radiobuttonSoftwareUpdate'
	$radiobuttonSoftwareUpdate.Size = '179, 24'
	$radiobuttonSoftwareUpdate.TabIndex = 0
	$radiobuttonSoftwareUpdate.TabStop = $True
	$radiobuttonSoftwareUpdate.Text = 'Software Update'
	$radiobuttonSoftwareUpdate.UseCompatibleTextRendering = $True
	$radiobuttonSoftwareUpdate.UseVisualStyleBackColor = $True
	$radiobuttonSoftwareUpdate.add_CheckedChanged($radiobuttonOption_CheckedChanged)
	#
	# tabpageStep4
	#
	$tabpageStep4.Controls.Add($radiobuttonManualStepByStep)
	$tabpageStep4.Controls.Add($radiobuttonAutomated)
	$tabpageStep4.Controls.Add($buttonExcuteAll)
	$tabpageStep4.Controls.Add($btnconvertvm)
	$tabpageStep4.Controls.Add($statuslabel)
	$tabpageStep4.Controls.Add($buttonStep3ConvertToTempla)
	$tabpageStep4.Controls.Add($labelBackgroundProcess1Te)
	$tabpageStep4.Controls.Add($buttonStep2StartUpdate)
	$tabpageStep4.Location = '4, 22'
	$tabpageStep4.Name = 'tabpageStep4'
	$tabpageStep4.Padding = '3, 3, 3, 3'
	$tabpageStep4.Size = '508, 267'
	$tabpageStep4.TabIndex = 3
	$tabpageStep4.Text = 'Step 4'
	$tabpageStep4.UseVisualStyleBackColor = $True
	#
	# radiobuttonManualStepByStep
	#
	$radiobuttonManualStepByStep.Location = '194, 17'
	$radiobuttonManualStepByStep.Name = 'radiobuttonManualStepByStep'
	$radiobuttonManualStepByStep.Size = '127, 24'
	$radiobuttonManualStepByStep.TabIndex = 7
	$radiobuttonManualStepByStep.TabStop = $True
	$radiobuttonManualStepByStep.Text = 'Manual: step by step'
	$radiobuttonManualStepByStep.UseCompatibleTextRendering = $True
	$radiobuttonManualStepByStep.UseVisualStyleBackColor = $True
	$radiobuttonManualStepByStep.add_CheckedChanged($radiobuttonManualStepByStep_CheckedChanged)
	#
	# radiobuttonAutomated
	#
	$radiobuttonAutomated.Location = '28, 17'
	$radiobuttonAutomated.Name = 'radiobuttonAutomated'
	$radiobuttonAutomated.Size = '104, 24'
	$radiobuttonAutomated.TabIndex = 6
	$radiobuttonAutomated.TabStop = $True
	$radiobuttonAutomated.Text = 'Automated'
	$radiobuttonAutomated.UseCompatibleTextRendering = $True
	$radiobuttonAutomated.UseVisualStyleBackColor = $True
	$radiobuttonAutomated.add_CheckedChanged($radiobuttonAutomated_CheckedChanged)
	#
	# buttonExcuteAll
	#
	$buttonExcuteAll.Enabled = $False
	$buttonExcuteAll.Location = '28, 63'
	$buttonExcuteAll.Name = 'buttonExcuteAll'
	$buttonExcuteAll.Size = '141, 52'
	$buttonExcuteAll.TabIndex = 5
	$buttonExcuteAll.Text = 'Automatic excute all'
	$buttonExcuteAll.UseCompatibleTextRendering = $True
	$buttonExcuteAll.UseVisualStyleBackColor = $True
	$buttonExcuteAll.add_Click($buttonExcuteAll_Click)
	#
	# btnconvertvm
	#
	$btnconvertvm.Enabled = $False
	$btnconvertvm.Location = '194, 47'
	$btnconvertvm.Name = 'btnconvertvm'
	$btnconvertvm.Size = '156, 23'
	$btnconvertvm.TabIndex = 4
	$btnconvertvm.Text = '  Step 1 Convert to VM'
	$btnconvertvm.TextAlign = 'MiddleLeft'
	$btnconvertvm.UseCompatibleTextRendering = $True
	$btnconvertvm.UseVisualStyleBackColor = $True
	$btnconvertvm.add_Click($btnConvertVM_Click)
	#
	# statuslabel
	#
	$statuslabel.AutoSize = $True
	$statuslabel.Location = '117, 164'
	$statuslabel.Name = 'statuslabel'
	$statuslabel.Size = '39, 17'
	$statuslabel.TabIndex = 3
	$statuslabel.Text = 'Status:'
	$statuslabel.UseCompatibleTextRendering = $True
	#
	# buttonStep3ConvertToTempla
	#
	$buttonStep3ConvertToTempla.Enabled = $False
	$buttonStep3ConvertToTempla.Location = '194, 105'
	$buttonStep3ConvertToTempla.Name = 'buttonStep3ConvertToTempla'
	$buttonStep3ConvertToTempla.Size = '156, 23'
	$buttonStep3ConvertToTempla.TabIndex = 2
	$buttonStep3ConvertToTempla.Text = '  Step 3 Convert to template'
	$buttonStep3ConvertToTempla.TextAlign = 'MiddleLeft'
	$buttonStep3ConvertToTempla.UseCompatibleTextRendering = $True
	$buttonStep3ConvertToTempla.UseVisualStyleBackColor = $True
	$buttonStep3ConvertToTempla.add_Click($buttonStep3ConvertToTempla_Click)
	#
	# labelBackgroundProcess1Te
	#
	$labelBackgroundProcess1Te.AutoSize = $True
	$labelBackgroundProcess1Te.Location = '6, 197'
	$labelBackgroundProcess1Te.Name = 'labelBackgroundProcess1Te'
	$labelBackgroundProcess1Te.Size = '479, 55'
	$labelBackgroundProcess1Te.TabIndex = 1
	$labelBackgroundProcess1Te.Text = 'Background Process
1. Template will be converted to VM and powerON
2. Selected task will be run on the VM (software update, patch or service pack)
3. Once completed, VM will be powered off and then convert to VMtemplate with higher version'
	$labelBackgroundProcess1Te.UseCompatibleTextRendering = $True
	#
	# buttonStep2StartUpdate
	#
	$buttonStep2StartUpdate.Enabled = $False
	$buttonStep2StartUpdate.Location = '194, 76'
	$buttonStep2StartUpdate.Name = 'buttonStep2StartUpdate'
	$buttonStep2StartUpdate.Size = '156, 23'
	$buttonStep2StartUpdate.TabIndex = 0
	$buttonStep2StartUpdate.Text = '  Step 2 Start Update'
	$buttonStep2StartUpdate.TextAlign = 'MiddleLeft'
	$buttonStep2StartUpdate.UseCompatibleTextRendering = $True
	$buttonStep2StartUpdate.UseVisualStyleBackColor = $True
	$buttonStep2StartUpdate.add_Click($buttonStep2StartUpdate_Click)
	#
	# buttonNext
	#
	$buttonNext.Anchor = 'Bottom, Right'
	$buttonNext.Location = '292, 315'
	$buttonNext.Name = 'buttonNext'
	$buttonNext.Size = '75, 23'
	$buttonNext.TabIndex = 2
	$buttonNext.Text = '&Next >'
	$buttonNext.UseCompatibleTextRendering = $True
	$buttonNext.UseVisualStyleBackColor = $True
	$buttonNext.add_Click($buttonNext_Click)
	#
	# sbLabel
	#
	$sbLabel.Name = 'sbLabel'
	$sbLabel.Size = '39, 17'
	$sbLabel.Text = 'Status'
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$tabpageStep4.ResumeLayout()
	$groupbox1.ResumeLayout()
	$tabpageStep3.ResumeLayout()
	$tabpageStep2.ResumeLayout()
	$tabpageStep1.ResumeLayout()
	$tabcontrolWizard.ResumeLayout()
	$mainconstrip.ResumeLayout()
	$formTemplateUpdateTool.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formTemplateUpdateTool.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formTemplateUpdateTool.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formTemplateUpdateTool.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formTemplateUpdateTool.ShowDialog()

} #End Function

#Call the form
Show-VPNEXVMupdateTool_psf | Out-Null
